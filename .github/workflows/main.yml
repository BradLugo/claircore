---
name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**"

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      go_versions: ${{ steps.config.outputs.go_versions }}
    steps:
      - id: config
        run: |
          echo 'go_versions=["1.20","1.19"]' >> $GITHUB_OUTPUT

  gating-lints:
    needs: ['config']
    name: Gating Lints
    runs-on: ubuntu-latest
    steps:
      - name: Commit Check
        uses: gsactions/commit-message-checker@v2
        with:
          pattern: |
            ^(.*):\s*(.*)\n.*$
          error: 'Commit must begin with <scope>: <subject>'
          flags: 'gm'
          excludeTitle: true
          excludeDescription: true
          checkAllCommitMessages: true
          accessToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check Filenames
        if: success() || failure()
        run: | # Check for all the characters Windows hates.
          git ls-files -- ':/:*[<>:"|?*]*' | while read -r file; do
            printf '::error file=%s,title=Bad Filename::Disallowed character in file name\n' "$file"
          done
          exit $(git ls-files -- ':/:*[<>:"|?*]*' | wc -l)
      - name: Setup Go
        if: success() || failure()
        uses: actions/setup-go@v4
        with:
          go-version: ${{ fromJSON(needs.config.outputs.go_versions)[0] }}
      - name: Go Tidy
        if: success() || failure()
        run: |
          trap 'echo "::error file=go.mod,title=Tidy Check::Commit would leave go.mod untidy"' ERR
          go mod tidy
          git diff --exit-code

  build-documentation:
    name: Build Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup mdBook
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: '0.3.5'
      - name: mdBook Build
        run: mdbook build

  tests:
    needs: ['config']
    name: Tests
    runs-on: ubuntu-latest
    env:
      POSTGRES_CONNECTION_STRING: "host=localhost port=5432 user=claircore dbname=claircore password=password sslmode=disable"
    strategy:
      fail-fast: false
      matrix:
        go: ${{ fromJSON(needs.config.outputs.go_versions) }}
    steps:
      - name: Database setup
        run: |
          set -e
          sudo systemctl start postgresql.service
          sudo -u postgres createuser -d -r -s claircore
          sudo -u postgres psql -c "ALTER ROLE claircore WITH PASSWORD 'password';"
          sudo -u postgres createdb -O claircore claircore
          psql -c 'SELECT version();' "$POSTGRES_CONNECTION_STRING" 
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Cache misc testdata
        uses: actions/cache@v3
        with:
          key: testdata-${{ hashFiles('**/*_test.go') }}
          restore-keys: |
            testdata-
          path: |
            **/testdata/*.layer
            **/testdata/*.tar
            **/testdata/*.tar.gz
      - name: Tests
        run: |
          find . -name .git -prune -o -name testdata -prune -o -name go.mod -printf '%h\n' |
          while read -r dir; do (
            cd "$dir";
            go list -m;
            go mod download;
            go test -race -tags integration ./...;
          ); done
      - name: Database Logs
        if: failure()
        run: |
          sudo journalctl --unit postgresql.service --boot -0
          ls /var/log/postgresql/postgresql-*.log
          sudo cat /var/log/postgresql/postgresql-*.log
