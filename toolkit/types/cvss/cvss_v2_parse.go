// Code generated by ragel-go from cvss_v2_parse.rl. DO NOT EDIT.

package cvss

import "fmt"

// UnmarshalText implements [encoding.TextUnmarshaler].
func (v *V2) UnmarshalText(data []byte) error {
	var m V2Metric
	var mi, vi int
	var set uint
	cs, p, pe, eof := 0, 0, len(data), len(data)
	{
		cs = int(v2_start)

	}
	{
		var _trans uint = 0
		var _keys int
		var _inds int
		var _ic int
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _v2_eof_trans[cs] > 0 {
				_trans = uint(_v2_eof_trans[cs]) - 1

			}

		} else {
			_keys = int((cs << 1))

			_inds = int(_v2_index_offsets[cs])

			if (data[p]) <= 117 && (data[p]) >= 47 {
				_ic = int(_v2_char_class[int((data[p]))-47])
				if _ic <= int(_v2_trans_keys[_keys+1]) && _ic >= int(_v2_trans_keys[_keys]) {
					_trans = uint(_v2_indices[_inds+int((_ic-int(_v2_trans_keys[_keys])))])

				} else {
					_trans = uint(_v2_index_defaults[cs])

				}

			} else {
				_trans = uint(_v2_index_defaults[cs])

			}

		}
		cs = int(_v2_cond_targs[_trans])
		if _v2_cond_actions[_trans] != 0 {
			switch _v2_cond_actions[_trans] {
			case 4:
				{
					vi = p
				}

			case 5:
				{
					switch s := string(data[vi:p]); {
					case m == V2ReportConfidence && s == "UR":
						v.mv[m] = 'u'
					case m == V2CollateralDamagePotential && s == "LM":
						v.mv[m] = 'l'
					case m == V2CollateralDamagePotential && s == "ND":
						v.mv[m] = 'X'
					case m == V2TargetDistribution && s == "ND":
						v.mv[m] = 'X'
					default:
						v.mv[m] = s[0]
					}
				}

			case 2:
				{
					mi = p
				}

			case 3:
				{
					m = v2Rev[string(data[mi:p])]
					x := uint(1 << uint(m))
					if (set & x) != 0 {
						return fmt.Errorf("cvss v2: %w: duplicated metric: %s\u2192%s\u2190%s",
							ErrMalformedVector,
							string(data[:mi]), string(data[mi:p]), string(data[p:]))
					}
					set |= x
				}

			case 1:
				{
					if p == eof {
						return fmt.Errorf("cvss v2: %w: too short", ErrMalformedVector)
					}
					return fmt.Errorf("cvss v2: %w: unexpected character #%d: %s\u2192%c\u2190%s",
						ErrMalformedVector,
						p+1, string(data[:p]), (data[p]), string(data[p+1:]))
				}

			}

		}
		if p == eof {
			if cs >= 68 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if p != eof {
		return fmt.Errorf("cvss v2: %w: unexpected character #%d: %s\u2192%c\u2190%s",
			ErrMalformedVector,
			p+1, string(data[:p]), data[p], string(data[p+1:]))
	}
	for m, b := range v.mv[:V2Availability+1] { // range inclusive
		if b == 0 {
			return fmt.Errorf("cvss v2: %w: missing metric: %q", ErrMalformedVector, V2Metric(m).String())
		}
	}
	for _, x := range []struct {
		Name string
		Set  uint
	}{
		{"Temporal", uint(1<<V2Exploitability | 1<<V2RemediationLevel | 1<<V2ReportConfidence)},
		{"Environmental", uint(1<<V2CollateralDamagePotential | 1<<V2TargetDistribution | 1<<V2ConfidentialityRequirement | 1<<V2IntegrityRequirement | 1<<V2AvailabilityRequirement)},
	} {
		if g := set & x.Set; g != 0 && g != x.Set {
			return fmt.Errorf("cvss v2: %w: missing %q group metrics", ErrMalformedVector, x.Name)
		}
	}
	return nil
}

var _v2_trans_keys = []byte{1, 0, 3, 17, 2, 21, 4, 14, 0, 0, 3, 17, 2, 21, 4, 14, 2, 2, 8, 11, 2, 2, 8, 12, 5, 5, 2, 2, 3, 12, 2, 2, 11, 16, 2, 15, 14, 14, 2, 2, 8, 12, 8, 8, 2, 2, 7, 18, 13, 13, 4, 4, 2, 15, 4, 10, 2, 2, 4, 18, 4, 15, 2, 2, 12, 20, 7, 7, 5, 5, 2, 2, 8, 12, 2, 2, 8, 11, 2, 2, 8, 12, 5, 5, 2, 2, 3, 12, 2, 2, 11, 16, 2, 15, 14, 14, 2, 2, 8, 12, 0, 11, 8, 8, 0, 5, 2, 2, 7, 18, 13, 13, 4, 4, 2, 15, 4, 10, 2, 2, 4, 18, 4, 15, 2, 2, 12, 20, 7, 7, 5, 5, 2, 2, 8, 12, 0, 0, 0, 11, 0, 5, 0}
var _v2_char_class = []int8{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 4, 5, 6, 7, 1, 8, 9, 1, 1, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 0}
var _v2_index_offsets = []int16{0, 0, 15, 35, 46, 47, 62, 82, 93, 94, 98, 99, 104, 105, 106, 116, 117, 123, 137, 138, 139, 144, 145, 146, 158, 159, 160, 174, 181, 182, 197, 209, 210, 219, 220, 221, 222, 227, 228, 232, 233, 238, 239, 240, 250, 251, 257, 271, 272, 273, 278, 290, 291, 297, 298, 310, 311, 312, 326, 333, 334, 349, 361, 362, 371, 372, 373, 374, 379, 380, 392, 0}
var _v2_indices = []int16{3, 4, 2, 5, 2, 2, 6, 2, 2, 2, 2, 2, 7, 2, 8, 10, 2, 11, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 2, 2, 2, 13, 2, 14, 16, 2, 2, 2, 2, 2, 2, 2, 16, 2, 16, 18, 20, 21, 2, 22, 2, 2, 23, 2, 2, 2, 2, 2, 24, 2, 25, 27, 2, 28, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 29, 2, 2, 2, 30, 2, 31, 33, 2, 2, 2, 2, 2, 2, 2, 33, 2, 33, 35, 33, 2, 33, 33, 38, 33, 2, 33, 33, 40, 42, 44, 33, 2, 2, 2, 2, 2, 2, 33, 2, 33, 47, 33, 33, 2, 2, 2, 33, 27, 2, 2, 50, 2, 2, 2, 2, 2, 2, 2, 2, 2, 29, 52, 54, 33, 2, 56, 57, 58, 42, 61, 33, 33, 2, 2, 2, 40, 2, 63, 2, 2, 2, 33, 65, 42, 27, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 29, 69, 2, 2, 2, 2, 2, 70, 72, 33, 2, 2, 2, 2, 2, 2, 2, 40, 2, 2, 2, 2, 2, 74, 42, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 42, 77, 40, 79, 2, 2, 2, 79, 33, 2, 33, 42, 82, 84, 33, 2, 33, 33, 58, 87, 16, 2, 16, 16, 90, 16, 2, 16, 16, 92, 94, 96, 16, 2, 2, 2, 2, 2, 2, 16, 2, 16, 99, 16, 16, 2, 2, 2, 16, 10, 2, 2, 102, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 104, 106, 16, 2, 108, 109, 110, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 94, 94, 18, 2, 2, 2, 2, 94, 115, 16, 16, 2, 2, 2, 92, 2, 117, 2, 2, 2, 16, 119, 94, 10, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12, 123, 2, 2, 2, 2, 2, 124, 126, 16, 2, 2, 2, 2, 2, 2, 2, 92, 2, 2, 2, 2, 2, 128, 94, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 94, 131, 92, 133, 2, 2, 2, 133, 16, 2, 16, 94, 136, 138, 16, 2, 16, 16, 110, 18, 18, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 42, 18, 2, 2, 2, 2, 42, 0}
var _v2_index_defaults = []int8{0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0}
var _v2_cond_targs = []int8{0, 1, 0, 2, 46, 53, 57, 58, 65, 2, 3, 37, 39, 42, 44, 3, 4, 4, 5, 5, 6, 17, 22, 26, 27, 34, 6, 7, 8, 10, 13, 15, 7, 68, 8, 9, 9, 10, 11, 11, 12, 12, 68, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 19, 20, 20, 69, 21, 70, 21, 22, 23, 23, 24, 24, 25, 25, 26, 27, 28, 31, 28, 29, 29, 30, 30, 31, 32, 32, 33, 33, 34, 35, 35, 36, 36, 37, 38, 38, 39, 40, 40, 41, 41, 4, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48, 48, 49, 49, 50, 51, 52, 50, 51, 52, 53, 54, 54, 55, 55, 56, 56, 57, 58, 59, 62, 59, 60, 60, 61, 61, 62, 63, 63, 64, 64, 65, 66, 66, 67, 67, 68, 69, 70, 0}
var _v2_cond_actions = []int8{0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 3, 0, 0, 0, 0, 1, 4, 1, 5, 1, 2, 2, 2, 2, 2, 2, 1, 3, 0, 0, 0, 0, 1, 4, 1, 3, 1, 1, 3, 1, 4, 1, 0, 1, 3, 1, 1, 3, 1, 1, 0, 1, 0, 1, 3, 1, 4, 4, 4, 1, 1, 3, 1, 4, 1, 0, 1, 1, 1, 0, 0, 1, 3, 1, 4, 1, 1, 3, 1, 4, 1, 1, 0, 1, 3, 1, 1, 3, 1, 1, 3, 1, 4, 1, 0, 1, 3, 1, 1, 3, 1, 1, 0, 1, 0, 1, 3, 1, 4, 4, 4, 1, 1, 1, 1, 3, 1, 4, 1, 0, 1, 1, 1, 0, 0, 1, 3, 1, 4, 1, 1, 3, 1, 4, 1, 1, 0, 1, 3, 1, 5, 5, 5, 0}
var _v2_eof_trans = []int16{1, 2, 10, 16, 18, 20, 27, 33, 35, 37, 38, 40, 42, 44, 46, 47, 49, 50, 52, 54, 56, 60, 61, 63, 65, 67, 68, 69, 72, 74, 76, 77, 79, 81, 82, 84, 86, 87, 89, 90, 92, 94, 96, 98, 99, 101, 102, 104, 106, 108, 112, 113, 114, 115, 117, 119, 121, 122, 123, 126, 128, 130, 131, 133, 135, 136, 138, 140, 141, 142, 143, 0}
var v2_start int = 1
var _ = v2_start
var v2_first_final int = 68
var _ = v2_first_final
var v2_error int = 0
var _ = v2_error
var v2_en_main int = 1
var _ = v2_en_main
