// Code generated by ragel-go from cvss_v2_parse.rl. DO NOT EDIT.

package cvss

import "fmt"

// UnmarshalText implements [encoding.TextUnmarshaler].
func (v *V2) UnmarshalText(data []byte) error {
	var m V2Metric
	var mi, vi int
	var set uint
	cs, p, pe, eof := 0, 0, len(data), len(data)
	{
		cs = int(v2_start)

	}
	{
		var _trans uint = 0
		var _keys int
		var _inds int
		var _ic int
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _v2_eof_trans[cs] > 0 {
				_trans = uint(_v2_eof_trans[cs]) - 1

			}

		} else {
			_keys = int((cs << 1))

			_inds = int(_v2_index_offsets[cs])

			if (data[p]) <= 117 && (data[p]) >= 47 {
				_ic = int(_v2_char_class[int((data[p]))-47])
				if _ic <= int(_v2_trans_keys[_keys+1]) && _ic >= int(_v2_trans_keys[_keys]) {
					_trans = uint(_v2_indices[_inds+int((_ic-int(_v2_trans_keys[_keys])))])

				} else {
					_trans = uint(_v2_index_defaults[cs])

				}

			} else {
				_trans = uint(_v2_index_defaults[cs])

			}

		}
		cs = int(_v2_cond_targs[_trans])
		if _v2_cond_actions[_trans] != 0 {
			switch _v2_cond_actions[_trans] {
			case 4:
				{
					vi = p
				}

			case 5:
				{
					switch s := string(data[vi:p]); {
					case m == V2ReportConfidence && s == "UR":
						v.mv[m] = 'u'
					case m == V2CollateralDamagePotential && s == "LM":
						v.mv[m] = 'l'
					case m == V2CollateralDamagePotential && s == "ND":
						v.mv[m] = 'X'
					case m == V2TargetDistribution && s == "ND":
						v.mv[m] = 'X'
					default:
						v.mv[m] = s[0]
					}
				}

			case 2:
				{
					mi = p
				}

			case 3:
				{
					m = v2Rev[string(data[mi:p])]
					x := uint(1 << uint(m))
					if (set & x) != 0 {
						return fmt.Errorf("cvss v2: %w: duplicated metric: %s\u2192%s\u2190%s",
							ErrMalformedVector,
							string(data[:mi]), string(data[mi:p]), string(data[p:]))
					}
					set |= x
				}

			case 1:
				{
					if p == eof {
						return fmt.Errorf("cvss v2: %w: too short", ErrMalformedVector)
					}
					return fmt.Errorf("cvss v2: %w: unexpected character #%d: %s\u2192%c\u2190%s",
						ErrMalformedVector,
						p+1, string(data[:p]), (data[p]), string(data[p+1:]))
				}

			}

		}
		if p == eof {
			if cs >= 79 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if p != eof {
		return fmt.Errorf("cvss v2: %w: unexpected character #%d: %s\u2192%c\u2190%s",
			ErrMalformedVector,
			p+1, string(data[:p]), data[p], string(data[p+1:]))
	}
	for m, b := range v.mv[:V2Availability+1] { // range inclusive
		if b == 0 {
			return fmt.Errorf("cvss v2: %w: missing metric: %q", ErrMalformedVector, V2Metric(m).String())
		}
	}
	for _, x := range []struct {
		Name string
		Set  uint
	}{
		{"Temporal", uint(1<<V2Exploitability | 1<<V2RemediationLevel | 1<<V2ReportConfidence)},
		{"Environmental", uint(1<<V2CollateralDamagePotential | 1<<V2TargetDistribution | 1<<V2ConfidentialityRequirement | 1<<V2IntegrityRequirement | 1<<V2AvailabilityRequirement)},
	} {
		if g := set & x.Set; g != 0 && g != x.Set {
			return fmt.Errorf("cvss v2: %w: missing %q group metrics", ErrMalformedVector, x.Name)
		}
	}
	return nil
}

var _v2_trans_keys = []byte{1, 0, 3, 3, 19, 19, 2, 2, 3, 12, 0, 0, 3, 3, 4, 4, 2, 2, 8, 11, 0, 0, 3, 3, 21, 21, 2, 2, 11, 16, 0, 0, 4, 4, 2, 2, 4, 14, 0, 0, 9, 9, 2, 2, 4, 14, 0, 0, 3, 3, 2, 2, 4, 14, 4, 6, 5, 5, 14, 14, 2, 2, 8, 12, 0, 0, 17, 17, 5, 5, 2, 2, 8, 12, 0, 0, 4, 4, 15, 15, 2, 2, 8, 12, 0, 0, 9, 9, 15, 15, 2, 2, 8, 12, 0, 0, 3, 3, 15, 15, 2, 2, 8, 12, 5, 5, 5, 5, 5, 5, 0, 5, 0, 11, 8, 8, 0, 5, 2, 2, 7, 18, 0, 0, 15, 15, 10, 10, 2, 2, 12, 20, 5, 5, 0, 0, 15, 15, 4, 4, 2, 2, 4, 18, 4, 4, 5, 5, 4, 15, 7, 7, 5, 5, 13, 13, 4, 4, 0, 0, 1, 0, 0, 0, 0}
var _v2_char_class = []int8{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1, 4, 5, 6, 7, 1, 8, 9, 1, 1, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 0}
var _v2_index_offsets = []int16{0, 0, 1, 2, 3, 13, 14, 15, 16, 17, 21, 22, 23, 24, 25, 31, 32, 33, 34, 45, 46, 47, 48, 59, 60, 61, 62, 73, 76, 77, 78, 79, 84, 85, 86, 87, 88, 93, 94, 95, 96, 97, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 120, 121, 122, 123, 129, 141, 142, 148, 149, 161, 162, 163, 164, 165, 174, 175, 176, 177, 178, 179, 194, 195, 196, 208, 209, 210, 211, 212, 213, 213, 0}
var _v2_indices = []int16{3, 5, 7, 9, 2, 2, 2, 2, 2, 2, 9, 2, 9, 11, 13, 15, 17, 19, 2, 19, 19, 21, 23, 25, 27, 29, 29, 2, 2, 2, 29, 31, 33, 35, 37, 2, 2, 2, 2, 2, 2, 2, 37, 2, 37, 39, 41, 43, 45, 2, 2, 2, 2, 2, 2, 2, 45, 2, 45, 47, 49, 51, 53, 2, 2, 2, 2, 2, 2, 2, 53, 2, 53, 55, 2, 56, 58, 60, 62, 64, 2, 65, 66, 67, 69, 71, 73, 75, 77, 2, 77, 77, 78, 80, 82, 84, 86, 88, 2, 88, 88, 89, 91, 93, 95, 97, 99, 2, 99, 99, 100, 102, 104, 106, 108, 110, 2, 110, 110, 111, 113, 115, 117, 80, 2, 2, 2, 2, 119, 69, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 121, 121, 69, 2, 2, 2, 2, 121, 125, 127, 127, 2, 2, 2, 128, 2, 129, 2, 2, 2, 127, 131, 133, 135, 137, 139, 140, 2, 2, 2, 140, 141, 2, 141, 143, 145, 147, 149, 151, 153, 2, 2, 2, 2, 2, 2, 2, 154, 2, 2, 2, 2, 2, 155, 55, 158, 158, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 158, 143, 162, 164, 162, 167, 170, 0}
var _v2_index_defaults = []int8{0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0}
var _v2_cond_targs = []int8{0, 1, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 79, 27, 28, 59, 28, 29, 29, 30, 30, 31, 31, 32, 56, 57, 58, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 55, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 54, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 53, 47, 48, 48, 49, 49, 50, 50, 51, 51, 80, 52, 52, 80, 53, 47, 54, 42, 55, 37, 56, 32, 57, 58, 59, 60, 60, 61, 76, 77, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 75, 67, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 81, 73, 74, 72, 73, 81, 74, 75, 76, 61, 77, 78, 78, 79, 27, 80, 81, 72, 0}
var _v2_cond_actions = []int8{0, 1, 1, 2, 1, 0, 1, 3, 1, 4, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 1, 5, 1, 2, 1, 3, 1, 4, 1, 5, 1, 2, 1, 3, 1, 4, 1, 5, 1, 2, 1, 3, 1, 4, 1, 2, 2, 1, 0, 1, 0, 1, 3, 1, 4, 4, 4, 4, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 4, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 4, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 4, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 4, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 3, 1, 4, 4, 4, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 4, 4, 1, 0, 1, 5, 1, 2, 1, 0, 1, 3, 1, 4, 4, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 5, 5, 5, 5, 5, 0}
var _v2_eof_trans = []int16{1, 2, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 58, 60, 62, 64, 69, 71, 73, 75, 77, 80, 82, 84, 86, 88, 91, 93, 95, 97, 99, 102, 104, 106, 108, 110, 113, 115, 117, 119, 121, 123, 124, 125, 127, 131, 133, 135, 137, 139, 143, 145, 147, 149, 151, 153, 157, 158, 160, 161, 162, 164, 166, 167, 169, 170, 0}
var v2_start int = 1
var _ = v2_start
var v2_first_final int = 79
var _ = v2_first_final
var v2_error int = 0
var _ = v2_error
var v2_en_main int = 1
var _ = v2_en_main
