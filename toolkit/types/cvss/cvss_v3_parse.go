// Code generated by ragel-go from cvss_v3_parse.rl. DO NOT EDIT.

package cvss

import "fmt"

// UnmarshalText implements [encoding.TextUnmarshaler].
func (v *V3) UnmarshalText(data []byte) error {
	var m V3Metric
	var mi int
	var set uint
	cs, p, pe, eof := 0, 0, len(data), len(data)
	{
		cs = int(v3_start)

	}
	{
		var _trans uint = 0
		var _keys int
		var _inds int
		var _ic int
	_resume:
		{

		}
		if p == pe && p != eof {
			goto _out

		}
		if p == eof {
			if _v3_eof_trans[cs] > 0 {
				_trans = uint(_v3_eof_trans[cs]) - 1

			}

		} else {
			_keys = int((cs << 1))

			_inds = int(_v3_index_offsets[cs])

			if (data[p]) <= 88 && (data[p]) >= 46 {
				_ic = int(_v3_char_class[int((data[p]))-46])
				if _ic <= int(_v3_trans_keys[_keys+1]) && _ic >= int(_v3_trans_keys[_keys]) {
					_trans = uint(_v3_indices[_inds+int((_ic-int(_v3_trans_keys[_keys])))])

				} else {
					_trans = uint(_v3_index_defaults[cs])

				}

			} else {
				_trans = uint(_v3_index_defaults[cs])

			}

		}
		cs = int(_v3_cond_targs[_trans])
		if _v3_cond_actions[_trans] != 0 {
			switch _v3_cond_actions[_trans] {
			case 2:
				{
					v.ver = int8((data[p]) - byte('0'))
				}

			case 5:
				{
					v.mv[m] = (data[p])
				}

			case 3:
				{
					mi = p
				}

			case 4:
				{
					m = v3Rev[string(data[mi:p])]
					x := uint(1 << uint(m))
					if (set & x) != 0 {
						return fmt.Errorf("cvss v3: %w: duplicated metric: %s\u2192%s\u2190%s",
							ErrMalformedVector,
							string(data[:mi]), string(data[mi:p]), string(data[p:]))
					}
					set |= x
				}

			case 1:
				{
					if p == eof {
						return fmt.Errorf("cvss v3: %w: too short", ErrMalformedVector)
					}
					return fmt.Errorf("cvss v3: %w: unexpected character #%d: %s\u2192%c\u2190%s",
						ErrMalformedVector,
						p+1, string(data[:p]), (data[p]), string(data[p+1:]))
				}

			}

		}
		if p == eof {
			if cs >= 48 {
				goto _out

			}

		} else {
			if cs != 0 {
				p += 1
				goto _resume

			}

		}
	_out:
		{

		}

	}
	if p != eof {
		return fmt.Errorf("cvss v3: %w: unexpected character #%d: %s\u2192%c\u2190%s",
			ErrMalformedVector,
			p+1, string(data[:p]), data[p], string(data[p+1:]))
	}
	for m, b := range v.mv[:V3Availability+1] { // range inclusive
		if b == 0 {
			return fmt.Errorf("cvss v3: %w: missing metric: %q", ErrMalformedVector, V3Metric(m).String())
		}
	}
	return nil
}

var _v3_trans_keys = []byte{1, 0, 7, 7, 20, 20, 18, 18, 18, 18, 5, 5, 4, 4, 0, 0, 2, 2, 1, 1, 6, 19, 5, 20, 10, 14, 5, 5, 10, 12, 5, 5, 10, 21, 5, 5, 6, 16, 5, 17, 5, 5, 9, 21, 6, 19, 5, 20, 10, 21, 5, 5, 10, 21, 5, 5, 6, 21, 5, 5, 17, 17, 5, 5, 7, 21, 11, 11, 5, 5, 14, 21, 17, 17, 5, 5, 7, 12, 5, 5, 7, 21, 5, 5, 15, 21, 5, 5, 7, 19, 11, 11, 5, 5, 14, 17, 1, 1, 0}
var _v3_char_class = []int8{0, 1, 2, 2, 3, 4, 3, 3, 3, 3, 3, 3, 5, 3, 3, 3, 3, 3, 3, 6, 3, 7, 3, 8, 9, 3, 10, 11, 3, 3, 12, 13, 14, 15, 16, 3, 17, 18, 15, 19, 20, 15, 21, 0}
var _v3_index_offsets = []int16{0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 23, 39, 44, 45, 48, 49, 61, 62, 73, 86, 87, 100, 114, 130, 142, 143, 155, 156, 172, 173, 174, 175, 190, 191, 192, 200, 201, 202, 208, 209, 224, 225, 232, 233, 246, 247, 248, 252, 0}
var _v3_indices = []int8{3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22, 23, 2, 2, 22, 2, 24, 2, 2, 25, 26, 27, 28, 30, 2, 31, 2, 2, 2, 2, 2, 2, 2, 2, 2, 32, 2, 2, 33, 35, 2, 35, 2, 35, 37, 35, 2, 35, 40, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 35, 43, 35, 2, 2, 2, 2, 2, 35, 2, 35, 2, 35, 30, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 32, 47, 35, 35, 2, 2, 2, 2, 2, 35, 2, 2, 35, 2, 35, 50, 51, 2, 2, 2, 51, 2, 2, 2, 2, 52, 2, 53, 54, 56, 2, 57, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 58, 35, 2, 35, 2, 35, 2, 2, 2, 2, 2, 2, 35, 61, 35, 2, 35, 2, 2, 2, 2, 2, 2, 2, 2, 35, 64, 35, 2, 2, 2, 2, 2, 35, 2, 35, 2, 35, 2, 2, 2, 2, 35, 56, 51, 69, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 35, 2, 35, 72, 74, 35, 2, 2, 35, 2, 2, 2, 35, 77, 30, 80, 2, 2, 2, 2, 81, 83, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 35, 2, 35, 2, 35, 86, 35, 2, 2, 2, 35, 2, 35, 89, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 35, 92, 94, 35, 2, 2, 35, 19, 0}
var _v3_index_defaults = []int8{0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0}
var _v3_cond_targs = []int8{0, 1, 0, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 19, 20, 22, 36, 38, 43, 45, 11, 12, 13, 15, 17, 12, 48, 13, 14, 14, 15, 16, 16, 17, 18, 18, 19, 20, 21, 21, 22, 23, 29, 30, 31, 33, 23, 24, 25, 27, 24, 25, 26, 26, 27, 28, 28, 29, 30, 31, 32, 32, 33, 34, 34, 35, 35, 36, 37, 37, 38, 39, 41, 39, 40, 40, 41, 42, 42, 43, 44, 44, 45, 46, 46, 47, 47, 48, 0}
var _v3_cond_actions = []int8{0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 2, 1, 0, 1, 3, 3, 3, 3, 3, 3, 3, 3, 1, 4, 0, 0, 0, 1, 5, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 1, 4, 1, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 1, 4, 1, 1, 4, 1, 1, 1, 1, 4, 1, 1, 0, 1, 4, 1, 1, 0, 1, 1, 0, 0, 1, 4, 1, 1, 4, 1, 1, 4, 1, 1, 0, 1, 4, 1, 0, 0}
var _v3_eof_trans = []int8{1, 2, 5, 7, 9, 11, 13, 15, 17, 19, 21, 30, 35, 37, 39, 40, 42, 43, 45, 46, 47, 49, 50, 56, 60, 61, 63, 64, 66, 67, 68, 69, 71, 72, 74, 76, 77, 79, 80, 83, 85, 86, 88, 89, 91, 92, 94, 96, 97, 0}
var v3_start int = 1
var _ = v3_start
var v3_first_final int = 48
var _ = v3_first_final
var v3_error int = 0
var _ = v3_error
var v3_en_main int = 1
var _ = v3_en_main
