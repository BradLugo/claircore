// Code generated by internal/cmd/v4data. DO NOT EDIT

package cvss

import (
	"math"
)

var _ = math.NaN()

// ScoreData is precomputed data for doing v4 score calculations
var scoreData = struct {
	// MacrovectorScore is the macrovector → score mapping that's incorporated
	// by reference into the spec.
	//
	// See Section 8.3 for the current fixture.
	macrovectorScore map[macrovector]float64
	// MetricsInEQ returns a slice of the metrics in a given equivalence class.
	//
	// See Section 8.2 for how equivalence classes are defined.
	metricsInEQ [numEquivalenceClass][]V4Metric
	// MaxFrag is a lookup table (EQ → level → []*V4) for the "subvectors"
	// representing the sets of metric values that will yield the highest score
	// within the equivalence class' level.
	//
	// This must be in the same order as the reference implementation, not
	// what's in the spec.
	//
	// See Section 8.2 for how equivalence classes and their levels are defined.
	maxFrag [numEquivalenceClass][][]*V4 // Not valid vectors!
	// EqDepth is the depth of the highest macrovector(s) given the equivalence
	// class and level, plus one.
	//
	// This is copied out of the javascript implementation, I have no idea why
	// it's incremented.
	//
	// See Section 8.2 for how "macrovector depth" defined.
	eqDepth [numEquivalenceClass][]float64
}{
	macrovectorScore: map[macrovector]float64{},
	metricsInEQ: [...][]V4Metric{},
	maxFrag: [...][][]*V4{},
	eqDepth: [...][]float64{},
}
