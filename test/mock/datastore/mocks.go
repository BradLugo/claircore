// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quay/claircore/datastore (interfaces: Enrichment,EnrichmentUpdater,MatcherStore,Updater,Vulnerability)
//
// Generated by this command:
//
//	mockgen -destination=./mocks.go github.com/quay/claircore/datastore Enrichment,EnrichmentUpdater,MatcherStore,Updater,Vulnerability
//

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	claircore "github.com/quay/claircore"
	datastore "github.com/quay/claircore/datastore"
	driver "github.com/quay/claircore/libvuln/driver"
	gomock "go.uber.org/mock/gomock"
)

// MockEnrichment is a mock of Enrichment interface.
type MockEnrichment struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichmentMockRecorder
}

// MockEnrichmentMockRecorder is the mock recorder for MockEnrichment.
type MockEnrichmentMockRecorder struct {
	mock *MockEnrichment
}

// NewMockEnrichment creates a new mock instance.
func NewMockEnrichment(ctrl *gomock.Controller) *MockEnrichment {
	mock := &MockEnrichment{ctrl: ctrl}
	mock.recorder = &MockEnrichmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrichment) EXPECT() *MockEnrichmentMockRecorder {
	return m.recorder
}

// GetEnrichment mocks base method.
func (m *MockEnrichment) GetEnrichment(arg0 context.Context, arg1 string, arg2 []string) ([]driver.EnrichmentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrichment", arg0, arg1, arg2)
	ret0, _ := ret[0].([]driver.EnrichmentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrichment indicates an expected call of GetEnrichment.
func (mr *MockEnrichmentMockRecorder) GetEnrichment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrichment", reflect.TypeOf((*MockEnrichment)(nil).GetEnrichment), arg0, arg1, arg2)
}

// MockEnrichmentUpdater is a mock of EnrichmentUpdater interface.
type MockEnrichmentUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockEnrichmentUpdaterMockRecorder
}

// MockEnrichmentUpdaterMockRecorder is the mock recorder for MockEnrichmentUpdater.
type MockEnrichmentUpdaterMockRecorder struct {
	mock *MockEnrichmentUpdater
}

// NewMockEnrichmentUpdater creates a new mock instance.
func NewMockEnrichmentUpdater(ctrl *gomock.Controller) *MockEnrichmentUpdater {
	mock := &MockEnrichmentUpdater{ctrl: ctrl}
	mock.recorder = &MockEnrichmentUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrichmentUpdater) EXPECT() *MockEnrichmentUpdaterMockRecorder {
	return m.recorder
}

// UpdateEnrichments mocks base method.
func (m *MockEnrichmentUpdater) UpdateEnrichments(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 []driver.EnrichmentRecord) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichments indicates an expected call of UpdateEnrichments.
func (mr *MockEnrichmentUpdaterMockRecorder) UpdateEnrichments(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichments", reflect.TypeOf((*MockEnrichmentUpdater)(nil).UpdateEnrichments), arg0, arg1, arg2, arg3)
}

// UpdateEnrichmentsIter mocks base method.
func (m *MockEnrichmentUpdater) UpdateEnrichmentsIter(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 datastore.EnrichmentIter) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichmentsIter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichmentsIter indicates an expected call of UpdateEnrichmentsIter.
func (mr *MockEnrichmentUpdaterMockRecorder) UpdateEnrichmentsIter(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichmentsIter", reflect.TypeOf((*MockEnrichmentUpdater)(nil).UpdateEnrichmentsIter), arg0, arg1, arg2, arg3)
}

// MockMatcherStore is a mock of MatcherStore interface.
type MockMatcherStore struct {
	ctrl     *gomock.Controller
	recorder *MockMatcherStoreMockRecorder
}

// MockMatcherStoreMockRecorder is the mock recorder for MockMatcherStore.
type MockMatcherStoreMockRecorder struct {
	mock *MockMatcherStore
}

// NewMockMatcherStore creates a new mock instance.
func NewMockMatcherStore(ctrl *gomock.Controller) *MockMatcherStore {
	mock := &MockMatcherStore{ctrl: ctrl}
	mock.recorder = &MockMatcherStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatcherStore) EXPECT() *MockMatcherStoreMockRecorder {
	return m.recorder
}

// DeleteUpdateOperations mocks base method.
func (m *MockMatcherStore) DeleteUpdateOperations(arg0 context.Context, arg1 ...uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUpdateOperations", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUpdateOperations indicates an expected call of DeleteUpdateOperations.
func (mr *MockMatcherStoreMockRecorder) DeleteUpdateOperations(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpdateOperations", reflect.TypeOf((*MockMatcherStore)(nil).DeleteUpdateOperations), varargs...)
}

// DeltaUpdateVulnerabilities mocks base method.
func (m *MockMatcherStore) DeltaUpdateVulnerabilities(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 []*claircore.Vulnerability, arg4 []string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeltaUpdateVulnerabilities", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeltaUpdateVulnerabilities indicates an expected call of DeltaUpdateVulnerabilities.
func (mr *MockMatcherStoreMockRecorder) DeltaUpdateVulnerabilities(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeltaUpdateVulnerabilities", reflect.TypeOf((*MockMatcherStore)(nil).DeltaUpdateVulnerabilities), arg0, arg1, arg2, arg3, arg4)
}

// GC mocks base method.
func (m *MockMatcherStore) GC(arg0 context.Context, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GC indicates an expected call of GC.
func (mr *MockMatcherStoreMockRecorder) GC(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockMatcherStore)(nil).GC), arg0, arg1)
}

// Get mocks base method.
func (m *MockMatcherStore) Get(arg0 context.Context, arg1 []*claircore.IndexRecord, arg2 datastore.GetOpts) (map[string][]*claircore.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]*claircore.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMatcherStoreMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMatcherStore)(nil).Get), arg0, arg1, arg2)
}

// GetEnrichment mocks base method.
func (m *MockMatcherStore) GetEnrichment(arg0 context.Context, arg1 string, arg2 []string) ([]driver.EnrichmentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrichment", arg0, arg1, arg2)
	ret0, _ := ret[0].([]driver.EnrichmentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrichment indicates an expected call of GetEnrichment.
func (mr *MockMatcherStoreMockRecorder) GetEnrichment(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrichment", reflect.TypeOf((*MockMatcherStore)(nil).GetEnrichment), arg0, arg1, arg2)
}

// GetLatestUpdateRef mocks base method.
func (m *MockMatcherStore) GetLatestUpdateRef(arg0 context.Context, arg1 driver.UpdateKind) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUpdateRef", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUpdateRef indicates an expected call of GetLatestUpdateRef.
func (mr *MockMatcherStoreMockRecorder) GetLatestUpdateRef(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUpdateRef", reflect.TypeOf((*MockMatcherStore)(nil).GetLatestUpdateRef), arg0, arg1)
}

// GetLatestUpdateRefs mocks base method.
func (m *MockMatcherStore) GetLatestUpdateRefs(arg0 context.Context, arg1 driver.UpdateKind) (map[string][]driver.UpdateOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUpdateRefs", arg0, arg1)
	ret0, _ := ret[0].(map[string][]driver.UpdateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUpdateRefs indicates an expected call of GetLatestUpdateRefs.
func (mr *MockMatcherStoreMockRecorder) GetLatestUpdateRefs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUpdateRefs", reflect.TypeOf((*MockMatcherStore)(nil).GetLatestUpdateRefs), arg0, arg1)
}

// GetUpdateDiff mocks base method.
func (m *MockMatcherStore) GetUpdateDiff(arg0 context.Context, arg1, arg2 uuid.UUID) (*driver.UpdateDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateDiff", arg0, arg1, arg2)
	ret0, _ := ret[0].(*driver.UpdateDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateDiff indicates an expected call of GetUpdateDiff.
func (mr *MockMatcherStoreMockRecorder) GetUpdateDiff(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateDiff", reflect.TypeOf((*MockMatcherStore)(nil).GetUpdateDiff), arg0, arg1, arg2)
}

// GetUpdateOperations mocks base method.
func (m *MockMatcherStore) GetUpdateOperations(arg0 context.Context, arg1 driver.UpdateKind, arg2 ...string) (map[string][]driver.UpdateOperation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpdateOperations", varargs...)
	ret0, _ := ret[0].(map[string][]driver.UpdateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateOperations indicates an expected call of GetUpdateOperations.
func (mr *MockMatcherStoreMockRecorder) GetUpdateOperations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateOperations", reflect.TypeOf((*MockMatcherStore)(nil).GetUpdateOperations), varargs...)
}

// Initialized mocks base method.
func (m *MockMatcherStore) Initialized(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialized", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialized indicates an expected call of Initialized.
func (mr *MockMatcherStoreMockRecorder) Initialized(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialized", reflect.TypeOf((*MockMatcherStore)(nil).Initialized), arg0)
}

// RecordUpdaterSetStatus mocks base method.
func (m *MockMatcherStore) RecordUpdaterSetStatus(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordUpdaterSetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordUpdaterSetStatus indicates an expected call of RecordUpdaterSetStatus.
func (mr *MockMatcherStoreMockRecorder) RecordUpdaterSetStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUpdaterSetStatus", reflect.TypeOf((*MockMatcherStore)(nil).RecordUpdaterSetStatus), arg0, arg1, arg2)
}

// RecordUpdaterStatus mocks base method.
func (m *MockMatcherStore) RecordUpdaterStatus(arg0 context.Context, arg1 string, arg2 time.Time, arg3 driver.Fingerprint, arg4 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordUpdaterStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordUpdaterStatus indicates an expected call of RecordUpdaterStatus.
func (mr *MockMatcherStoreMockRecorder) RecordUpdaterStatus(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUpdaterStatus", reflect.TypeOf((*MockMatcherStore)(nil).RecordUpdaterStatus), arg0, arg1, arg2, arg3, arg4)
}

// UpdateEnrichments mocks base method.
func (m *MockMatcherStore) UpdateEnrichments(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 []driver.EnrichmentRecord) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichments indicates an expected call of UpdateEnrichments.
func (mr *MockMatcherStoreMockRecorder) UpdateEnrichments(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichments", reflect.TypeOf((*MockMatcherStore)(nil).UpdateEnrichments), arg0, arg1, arg2, arg3)
}

// UpdateEnrichmentsIter mocks base method.
func (m *MockMatcherStore) UpdateEnrichmentsIter(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 datastore.EnrichmentIter) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichmentsIter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichmentsIter indicates an expected call of UpdateEnrichmentsIter.
func (mr *MockMatcherStoreMockRecorder) UpdateEnrichmentsIter(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichmentsIter", reflect.TypeOf((*MockMatcherStore)(nil).UpdateEnrichmentsIter), arg0, arg1, arg2, arg3)
}

// UpdateVulnerabilities mocks base method.
func (m *MockMatcherStore) UpdateVulnerabilities(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 []*claircore.Vulnerability) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerabilities", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVulnerabilities indicates an expected call of UpdateVulnerabilities.
func (mr *MockMatcherStoreMockRecorder) UpdateVulnerabilities(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerabilities", reflect.TypeOf((*MockMatcherStore)(nil).UpdateVulnerabilities), arg0, arg1, arg2, arg3)
}

// UpdateVulnerabilitiesIter mocks base method.
func (m *MockMatcherStore) UpdateVulnerabilitiesIter(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 datastore.VulnerabilityIter) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerabilitiesIter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVulnerabilitiesIter indicates an expected call of UpdateVulnerabilitiesIter.
func (mr *MockMatcherStoreMockRecorder) UpdateVulnerabilitiesIter(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerabilitiesIter", reflect.TypeOf((*MockMatcherStore)(nil).UpdateVulnerabilitiesIter), arg0, arg1, arg2, arg3)
}

// MockUpdater is a mock of Updater interface.
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUpdaterMockRecorder
}

// MockUpdaterMockRecorder is the mock recorder for MockUpdater.
type MockUpdaterMockRecorder struct {
	mock *MockUpdater
}

// NewMockUpdater creates a new mock instance.
func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &MockUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdater) EXPECT() *MockUpdaterMockRecorder {
	return m.recorder
}

// DeleteUpdateOperations mocks base method.
func (m *MockUpdater) DeleteUpdateOperations(arg0 context.Context, arg1 ...uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUpdateOperations", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUpdateOperations indicates an expected call of DeleteUpdateOperations.
func (mr *MockUpdaterMockRecorder) DeleteUpdateOperations(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpdateOperations", reflect.TypeOf((*MockUpdater)(nil).DeleteUpdateOperations), varargs...)
}

// DeltaUpdateVulnerabilities mocks base method.
func (m *MockUpdater) DeltaUpdateVulnerabilities(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 []*claircore.Vulnerability, arg4 []string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeltaUpdateVulnerabilities", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeltaUpdateVulnerabilities indicates an expected call of DeltaUpdateVulnerabilities.
func (mr *MockUpdaterMockRecorder) DeltaUpdateVulnerabilities(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeltaUpdateVulnerabilities", reflect.TypeOf((*MockUpdater)(nil).DeltaUpdateVulnerabilities), arg0, arg1, arg2, arg3, arg4)
}

// GC mocks base method.
func (m *MockUpdater) GC(arg0 context.Context, arg1 int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GC indicates an expected call of GC.
func (mr *MockUpdaterMockRecorder) GC(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockUpdater)(nil).GC), arg0, arg1)
}

// GetLatestUpdateRef mocks base method.
func (m *MockUpdater) GetLatestUpdateRef(arg0 context.Context, arg1 driver.UpdateKind) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUpdateRef", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUpdateRef indicates an expected call of GetLatestUpdateRef.
func (mr *MockUpdaterMockRecorder) GetLatestUpdateRef(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUpdateRef", reflect.TypeOf((*MockUpdater)(nil).GetLatestUpdateRef), arg0, arg1)
}

// GetLatestUpdateRefs mocks base method.
func (m *MockUpdater) GetLatestUpdateRefs(arg0 context.Context, arg1 driver.UpdateKind) (map[string][]driver.UpdateOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestUpdateRefs", arg0, arg1)
	ret0, _ := ret[0].(map[string][]driver.UpdateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestUpdateRefs indicates an expected call of GetLatestUpdateRefs.
func (mr *MockUpdaterMockRecorder) GetLatestUpdateRefs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestUpdateRefs", reflect.TypeOf((*MockUpdater)(nil).GetLatestUpdateRefs), arg0, arg1)
}

// GetUpdateDiff mocks base method.
func (m *MockUpdater) GetUpdateDiff(arg0 context.Context, arg1, arg2 uuid.UUID) (*driver.UpdateDiff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateDiff", arg0, arg1, arg2)
	ret0, _ := ret[0].(*driver.UpdateDiff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateDiff indicates an expected call of GetUpdateDiff.
func (mr *MockUpdaterMockRecorder) GetUpdateDiff(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateDiff", reflect.TypeOf((*MockUpdater)(nil).GetUpdateDiff), arg0, arg1, arg2)
}

// GetUpdateOperations mocks base method.
func (m *MockUpdater) GetUpdateOperations(arg0 context.Context, arg1 driver.UpdateKind, arg2 ...string) (map[string][]driver.UpdateOperation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUpdateOperations", varargs...)
	ret0, _ := ret[0].(map[string][]driver.UpdateOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateOperations indicates an expected call of GetUpdateOperations.
func (mr *MockUpdaterMockRecorder) GetUpdateOperations(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateOperations", reflect.TypeOf((*MockUpdater)(nil).GetUpdateOperations), varargs...)
}

// Initialized mocks base method.
func (m *MockUpdater) Initialized(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialized", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialized indicates an expected call of Initialized.
func (mr *MockUpdaterMockRecorder) Initialized(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialized", reflect.TypeOf((*MockUpdater)(nil).Initialized), arg0)
}

// RecordUpdaterSetStatus mocks base method.
func (m *MockUpdater) RecordUpdaterSetStatus(arg0 context.Context, arg1 string, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordUpdaterSetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordUpdaterSetStatus indicates an expected call of RecordUpdaterSetStatus.
func (mr *MockUpdaterMockRecorder) RecordUpdaterSetStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUpdaterSetStatus", reflect.TypeOf((*MockUpdater)(nil).RecordUpdaterSetStatus), arg0, arg1, arg2)
}

// RecordUpdaterStatus mocks base method.
func (m *MockUpdater) RecordUpdaterStatus(arg0 context.Context, arg1 string, arg2 time.Time, arg3 driver.Fingerprint, arg4 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordUpdaterStatus", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordUpdaterStatus indicates an expected call of RecordUpdaterStatus.
func (mr *MockUpdaterMockRecorder) RecordUpdaterStatus(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordUpdaterStatus", reflect.TypeOf((*MockUpdater)(nil).RecordUpdaterStatus), arg0, arg1, arg2, arg3, arg4)
}

// UpdateEnrichments mocks base method.
func (m *MockUpdater) UpdateEnrichments(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 []driver.EnrichmentRecord) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichments", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichments indicates an expected call of UpdateEnrichments.
func (mr *MockUpdaterMockRecorder) UpdateEnrichments(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichments", reflect.TypeOf((*MockUpdater)(nil).UpdateEnrichments), arg0, arg1, arg2, arg3)
}

// UpdateEnrichmentsIter mocks base method.
func (m *MockUpdater) UpdateEnrichmentsIter(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 datastore.EnrichmentIter) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrichmentsIter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEnrichmentsIter indicates an expected call of UpdateEnrichmentsIter.
func (mr *MockUpdaterMockRecorder) UpdateEnrichmentsIter(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrichmentsIter", reflect.TypeOf((*MockUpdater)(nil).UpdateEnrichmentsIter), arg0, arg1, arg2, arg3)
}

// UpdateVulnerabilities mocks base method.
func (m *MockUpdater) UpdateVulnerabilities(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 []*claircore.Vulnerability) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerabilities", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVulnerabilities indicates an expected call of UpdateVulnerabilities.
func (mr *MockUpdaterMockRecorder) UpdateVulnerabilities(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerabilities", reflect.TypeOf((*MockUpdater)(nil).UpdateVulnerabilities), arg0, arg1, arg2, arg3)
}

// UpdateVulnerabilitiesIter mocks base method.
func (m *MockUpdater) UpdateVulnerabilitiesIter(arg0 context.Context, arg1 string, arg2 driver.Fingerprint, arg3 datastore.VulnerabilityIter) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVulnerabilitiesIter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVulnerabilitiesIter indicates an expected call of UpdateVulnerabilitiesIter.
func (mr *MockUpdaterMockRecorder) UpdateVulnerabilitiesIter(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVulnerabilitiesIter", reflect.TypeOf((*MockUpdater)(nil).UpdateVulnerabilitiesIter), arg0, arg1, arg2, arg3)
}

// MockVulnerability is a mock of Vulnerability interface.
type MockVulnerability struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilityMockRecorder
}

// MockVulnerabilityMockRecorder is the mock recorder for MockVulnerability.
type MockVulnerabilityMockRecorder struct {
	mock *MockVulnerability
}

// NewMockVulnerability creates a new mock instance.
func NewMockVulnerability(ctrl *gomock.Controller) *MockVulnerability {
	mock := &MockVulnerability{ctrl: ctrl}
	mock.recorder = &MockVulnerabilityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnerability) EXPECT() *MockVulnerabilityMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVulnerability) Get(arg0 context.Context, arg1 []*claircore.IndexRecord, arg2 datastore.GetOpts) (map[string][]*claircore.Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string][]*claircore.Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVulnerabilityMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVulnerability)(nil).Get), arg0, arg1, arg2)
}
